// 데이터 타입
/**
 * 여섯개의 Primitive Type과
 * 한개의 오브젝트 타임이 있다.
 * 
 * 1) Number (숫자)
 * 2) String (문자열)
 * 3) Boolean (불리안) -> True,False
 * 4) undefined (언디파인드)
 * 5) null (널)
 * 6) symbol (심볼)
 * 
 * 7) Object (객체)
 *    Function
 *    Array
 *    Object
 */

// Number 타입 
const age = 26;
const tempature = -5;
const pi = 3.14;

console.log(typeof age);
console.log(typeof tempature);
console.log(typeof pi);
console.log('--------------');

const infinity = Infinity; // 무한대 값 
const ninfinity = -Infinity; // - 무한대 값 

console.log(typeof infinity);
console.log(typeof ninfinity);
console.log('--------------');

// String 타입 
const kDooSik = '"강"두식';
console.log(kDooSik);
console.log(typeof kDooSik);

const ive = "'아이브' 레이";
console.log(ive);

/**
 * Template Literal
 * 
 * Escaping Character
 * 1) newline -> \n
 * 2) tap -> \t
 * 3) 백슬래시를 스트링으로 표현하고 싶다면 두번 입력 하면 된다
 */
const iveLay = '아이브\n레이';
console.log(iveLay);
const iveLiz = '아이브\t리즈';
console.log(iveLiz);
const iveKang = '아이브\\강두식';
console.log(iveKang);
const ive2 = '아이브\'강두식';
console.log(ive2);

const ivee = `아이브 ' " /////
레이`; // `` 를 사용하면 안에 넣은 그대로 출력이 된다
console.log(ivee);

console.log(typeof ivee);

const groupName = '아이브';
console.log(groupName + ' 레이');
console.log(`${groupName} 레이`);
console.log('--------------');

/**
 * Boolean 타입 
 */
const isTrue = true;
const isFalse = false;
console.log(typeof isTrue);
console.log(typeof isFalse);
console.log('--------------');

/**
 * undefined
 * 
 * 사용자가 직접 값을 초기화 하지 않았을 때
 * 지정되는 값이다.
 * 
 * 직접 Undefined로 값을 초기화 하는 건 지양해야한다.
 */
let noInit;
console.log(noInit);
console.log(typeof noInit);

/**
 * null 타입
 * 
 * undefined와 마찬가지로 값이 없다는 뜻이나
 * JS에서는 개발자가 명시적으로 없는 값으로 초기화할 때
 * 사용된다.
 */
let init = null;
console.log(init);
console.log(typeof init);
console.log('--------------');

/**
 * Symbol 타입
 * 
 * 유일무이한 값을 생성할 때 사용한다.
 * 다른 프리미티브 값들과 다르게 Symbol 함수를
 * 호출해서 사용된다.
 */
const test1 = '1';
const test2 = '1';

console.log(test1 === test2);

const symbol1 = Symbol('1');
const symbol2 = Symbol('1');

console.log(symbol1 === symbol2);

/**
 * Object 타입 
 * 
 * Map
 * 키:밸류의 쌍으로 이루어져있다.
 * Key:Value
 */
const dictionary = {
    red: '빨간색',
    orange: '주황색',
    yellow: '노란색'
};

console.log(dictionary);
console.log(dictionary['red']);
console.log(dictionary['orange']);
console.log(dictionary['yellow']);

console.log(typeof dictionary);

/**
 * Array 타입
 * 
 * 값을 리스트로 나열 할 수 있는 타입이다.
 */

const iveMembersArray = [
    '안유진',
    '레이',
    '장원영',
    '이서',
    '가을',
    '리즈',
];

console.log(iveMembersArray);

/**
 * index
 * 
 * 0부터 시작한다.
 * 1씩 올라갑니다.
 */
console.log(iveMembersArray[0]);
console.log(iveMembersArray[5]);

iveMembersArray[0] = '강두식';
console.log(iveMembersArray);

/**
 * static typing -> 변수를 선언할 때 어떤 타입의 변수를 선언할지 명시를 한다.
 *                 예시 : C
 * dynamic typing -> 변수의 타입을 명시적으로 선언하지 않고 값에 의해 타입을 "추론"한다.
 * JS -> dynamic typing
 */

// 호이스팅
/**
 * Hoisting
 */
console.log('Hello');
console.log('world');
console.log('--------------');

// console.log(name);
// var name = '강두식씨';
// console.log(name);

/**
 * Hoisting은 무엇인가?
 * 
 * 모든 변수 선언문이 코드의 최상단으로 이동되는 것처럼 느껴지는 현상을 이야기한다.
 */

// var name;
// console.log(name);
// name = '강두식씨';
// console.log(name);

// let과 const는 값이 초기화 되기 전에 미리 값을 가져오는 버그를 막아줄 수 있다.

console.log(ray);
const ray = '레이';
