class BuildingUnit(Unit) :
    def __init__(self, name, hp, location):
        Unit.__init__(self,name,hp,0)
        super().__init__(name,hp,0)
        self.location = location

class Unit:
    def __init__(self):
        print('Unit 생성자')

class Flyable:
    def __init__(self):
        print('Flyable 생성자')

class FlyableUnit(Unit,Flyable) :
    def __init__(self):
        super().__init__()
        Unit.__init__(self)
        Flyable.__init__(self)

# 스타크래프트 게임
from random import *

class Unit :
    def __init__(self,name,hp,speed) :
        self.name = name
        self.hp = hp
        self.speed = speed
        print(f'{name} 유닛이 생성되었습니다.')
    
    def move(self,location) : # move 함수 추가
        print(f'{self.name} : {location} 방향으로 이동중 [속도 {self.speed}]')

    def damaged(self,damage) :
        print(f'{self.name} : {damage} 데미지를 입었습니다.')
        self.hp -= damage
        print(f'{self.name} : 현재 체력은 {self.hp} 입니다.')
        if self.hp <= 0 :
            print(f'{self.name} : 파괴되었습니다.')
        
class AttackUnit(Unit) :
    def __init__(self,name,hp,speed,damage) :
        Unit.__init__(self,name,hp,speed)
        self.damage = damage

    def attack(self,location) :
        print(f'{self.name} : {location} 방향으로 적군을 공격합니다. [공격력 {self.damage}]')

# 마린
class Marine(AttackUnit) :
    def __init__(self):
        AttackUnit.__init__(self,"마린",40,1,5)

    def stimpack(self) :
        if self.hp > 10 :
            self.hp -= 10
            print(f'{self.name} : 스팀팩을 사용합니다. [체력 10 감소]')
        else :
            print(f'{self.name} : 체력이 부족하여 스팀팩 사용이 불가능 합니다.')
        
# 탱크
class Tank(AttackUnit) :
    seize_developed = False

    def __init__(self):
        AttackUnit.__init__(self,'탱크',150,1,35)
        self.seizw_mode = False

    def set_seize_mode(self) :
        if Tank.seize_developed == False :
            return
        
        # 현재 시즈모드가 아닐 때 -> 시즈모드
        if self.seizw_mode == False :
            print(f'{self.name} : 시즈모드로 전환합니다')
            self.damage *= 2
            self.seizw_mode = True
        # 현재 시즈모드일 때 -> 시즈모드 해제
        else :
            print(f'{self.name} : 시즈모드를 해제합니다.')
            self.damage /= 2
            self.seizw_mode = False
        
class Flyable :
    def __init__(self,flying_speed):
        self.flying_speed = flying_speed

    def fly(self,name,location) :
        print(f'{name} : {location} 방향으로 날아갑니다. [속도 {self.flying_speed}]')

# 공중 공격 유닛 클래스
class FlyableAttackUnit(AttackUnit,Flyable) :
    def __init__(self, name, hp, damage,flying_speed):
        AttackUnit.__init__(self,name,0,hp,damage)
        Flyable.__init__(self,flying_speed)

    def move(self,location) : # move함수 재정의 이게 메소드 오버라이딩
        self.fly(self.name,location)

class Wraith(FlyableAttackUnit) :
    def __init__(self):
        FlyableAttackUnit.__init__(self,'레이스',80,20,5)
        self.cloked = False # 클로킹 해제 상태

    def cloking(self) :
        if self.cloked == True :
            print(f'{self.name} : 클로킹 모드를 해제합니다.')
            self.cloked = False
        else :
            print(f'{self.name} : 클로킹 모드를 설정합니다.')
            self.cloked = True

def game_start() :
    print('[알림] 새로운 게임을 시작합니다.')

def game_over() :
    print('player : gg')
    print('[player] 님이 게임에서 퇴장하셨습니다.')

# 실제 게임 진행
game_start()

m1 = Marine()
m2 = Marine()
m3 = Marine()

t1 = Tank()
t2 = Tank()

w1 = Wraith()

# 유닛 일괄 관리
attack_unit = []
attack_unit.append(m1)
attack_unit.append(m2)
attack_unit.append(m3)
attack_unit.append(t1)
attack_unit.append(t2)
attack_unit.append(w1)
        
# 전군 이동 
for unit in attack_unit :
    unit.move('1시')   

# 탱크 시즈모드 개발
Tank.seize_developed = True
print('[알림] 탱크 시즈 모드 개발이 완료되었습니다.')

# 공격 모드 준비 (마린 : 스팀팩, 탱크 : 시즈모드, 레이스 : 클로킹)
for unit in attack_unit :
    if isinstance(unit,Marine) :
        unit.stimpack()
    elif isinstance(unit,Tank) :
        unit.set_seize_mode()
    elif isinstance(unit,Wraith) :
        unit.cloking()

# 전군 공격
for unit in attack_unit :
    unit.attack('1시')

# 전군 피해 입음
for unit in attack_unit :
    unit.damaged(randint(5,20))

# 게임 종료
game_over()
