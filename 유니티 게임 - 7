// 무기 업그레이드
using System.Collections; // GameManager 스크립트
using System.Collections.Generic;
using UnityEngine;
using TMPro; // 이걸 사용하겠다고 using으로 정의해줘야 밑에 TextMeshProUGUI가 사용 가능하다.

public class GameManager : MonoBehaviour
{
    public static GameManager instance = null;

    [SerializeField]
    private TextMeshProUGUI text;
    private int coin = 0; // 게임 화면에 코인을 먹으면 개수가 늘어나는 걸 보여줘야 해서 코인 변수를 만들어준다.

    void Awake() {
        if (instance == null) { // 싱글턴이라는 디자인 패턴이라고 한다.
            instance = this;
        }
    }

    public void IncreaseCoin() { // 이 함수를 public으로 만들어 줌으로써 player 스크립트에서 코인을 먹었을 때 충돌 처리로 이 함수를 사용한다.
        coin += 1;
        text.SetText(coin.ToString()); // 게임 화면에 텍스트를 업데이트 해주기 위해 사용하는 함수(int인 coin을 문자열로 바꿔주기 위해 ToString을 사용해 주었다.)
    
        if (coin % 10 == 0) { // 코인을 30개 먹을 때 마다 무기를 업그레이드 시켜주기 위한 부분.
            player player = FindObjectOfType<player>(); // Unity의 FindObjectOfType 메서드는 특정 타입의 게임 오브젝트를 찾는 데 사용되는 메서드이다. 이 메서드는 지정된 타입의 게임 오브젝트가 하나라도 있는 경우 그 게임 오브젝트를 반환하고, 없는 경우 null을 반환한다.
                if (player != null) { // 찾았을 때 null 아니고 잘 찾았다면 실행된다.
                player.Upgrade();
            }
        }
    }
}

using System.Collections; // Player 스크립트
using System.Collections.Generic;
using UnityEngine;

public class player : MonoBehaviour
{
    [SerializeField]
    private float moveSpeed;

    [SerializeField]
    private GameObject[] Weapons; // []를 붙임으로써 여러개의 무기 배열을 받을 수 있다.
    private int WeaponIndex = 0; // Weapons에 저장 된 무기를 가져올 수 있게 Weapons 전용 Index를 만들어 준다.

    [SerializeField]
    private Transform shootTransform;

    [SerializeField]
    private float shootInterval = 0.05f;
    private float lastShootTime = 0f;
    // Update is called once per frame
    void Update()
    {
        // float horizontalInput = Input.GetAxisRaw("Horizontal");
        // //float verticalInput = Input.GetAxisRaw("Vertical");
        // Vector3 moveTo = new Vector3(horizontalInput, 0f, 0f);
        // transform.position += moveTo * moveSpeed * Time.deltaTime;
        Vector3 mousePos = Camera.main.ScreenToWorldPoint(Input.mousePosition);
        float tox = Mathf.Clamp(mousePos.x, -2.35f, 2.35f); // 현재값,최소값,최대값 
        transform.position = new Vector3(tox, transform.position.y, transform.position.z);

        Shoot();
    }   

    void Shoot() {
        if (Time.time - lastShootTime > shootInterval) {
            Instantiate(Weapons[WeaponIndex], shootTransform.position, Quaternion.identity);
            lastShootTime = Time.time;
        }

        
    }
    private void OnTriggerEnter2D(Collider2D other) { // 무기와 주인공이 충돌 했을 때 실행 되는 부분.
        if (other.gameObject.tag == "Enemy") {
            Debug.Log("Game Over"); // 무기와 주인공이 충돌하면 바로 주인공은 사라지고 Game Over 알림이 뜨게 처리하는 부분.
            Destroy(gameObject);
        } else if (other.gameObject.tag == "Coin") { // 코인과 주인공이 충돌 했을 때 실행 되는 부분.
            GameManager.instance.IncreaseCoin();
            Destroy(other.gameObject); // 코인을 주인공이 먹으면 바로 사라져야해서 코인을 바로 없애주는 부분.
        }
    }

    public void Upgrade() { // GameManager에서 사용 가능하게 Public으로 만들어준다.
        WeaponIndex += 1; // 무기 업그레이드를 위해 Index를 1 증가 시킨다.
        if (WeaponIndex >= Weapons.Length) { // 현재 무기가 3개 밖에 없기 때문에 Index가 2까지 밖에 없는데 Index가 2를 넘어가는 걸 방지해 주는 부분.
            WeaponIndex = Weapons.Length -1;
        }
    }
}
