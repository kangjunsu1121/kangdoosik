import pygame

pygame.init() # 초기화 (반드시 필요)

# 화면 크기 설정
screen_width = 480 # 가로크기
screen_height = 640 # 세로크기
screen = pygame.display.set_mode((screen_width,screen_height))

# 화면 타이틀 설정
pygame.display.set_caption('Doosik Game') # 게임 이름 

# FPS
clock = pygame.time.Clock()

# 배경 이미지 불러오기
background = pygame.image.load('C:/pythonworkspace/background.png')

# 캐릭터(스프라이트) 불러오기
character = pygame.image.load('C:/pythonworkspace/박순경.png')
character_size = character.get_rect().size # 이미지 크기를 구해옴
character_width = character_size[0] # 캐릭터의 가로 크기
character_height = character_size[1] # 캐릭터의 세로 크기
character_x_pos = (screen_width/2) - (character_width/2) # 화면 가로의 절반 크기에 해당하는 곳에 위치 (가로)
character_y_pos = screen_height - character_height # 화면 세로 크기에 가장 아래쪽에 위치 (세로)

# 이동할 좌표
to_x = 0
to_y = 0

# 이동 속도
character_speed = 0.6

# 적 enemy 캐릭터
enemy = pygame.image.load('C:/pythonworkspace/enemy.png')
enemy_size = enemy.get_rect().size # 이미지 크기를 구해옴
enemy_width = enemy_size[0] # 캐릭터의 가로 크기
enemy_height = enemy_size[1] # 캐릭터의 세로 크기
enemy_x_pos = (screen_width/2) - (enemy_width/2) # 화면 가로의 절반 크기에 해당하는 곳에 위치 (가로)
enemy_y_pos = (screen_height/2) - (enemy_height/2) # 화면 세로 크기에 가장 아래쪽에 위치 (세로)


# 이벤트 루프
running = True # 게임이 진행중인가?
while running :
    dt = clock.tick(60) # 게임 화면의 초당 프레임 수를 설정

# 캐릭터가 1초 동안에 100 만큼 이동을 해야함
# 10 fps : 1초 동안에 10번 동작 -> 1번에 몇 만큼 이동? 10만큼! 10 * 10 = 100
# 20 fps : 1초 동안에 20번 동작 -> 1번에 5만큼! 5 * 20 = 100
    for event in pygame.event.get() : # 어떤 이벤트가 발생하였는가?
        if event.type == pygame.QUIT : # 창이 닫히는 이벤트가 발생하였는가?
            running = False # 게임이 진행중이 아님

        if event.type == pygame.KEYDOWN : # 키가 눌러졌는지 확인
            if event.key == pygame.K_LEFT : # 키 왼쪽
                to_x -= character_speed
            elif event.key == pygame.K_RIGHT : # 키 오른쪽
                to_x += character_speed
            elif event.key == pygame.K_UP : # 키 위쪽
                to_y -= character_speed
            elif event.key == pygame.K_DOWN : # 키 아래쪽
                to_y += character_speed

        if event.type == pygame.KEYUP : # 방향키를 떼면 멈춤
            if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT :
                to_x = 0
            elif event.key == pygame.K_UP or event.key == pygame.K_DOWN :
                to_y = 0

    character_x_pos += to_x * dt
    character_y_pos += to_y * dt

    # 가로 경계값 처리
    if character_x_pos < 0 :
        character_x_pos = 0
    elif character_x_pos > screen_width - character_width :
        character_x_pos = screen_width - character_width

    # 세로 경계값 처리
    if character_y_pos < 0 :
        character_y_pos = 0
    elif character_y_pos > screen_height - character_height :
        character_y_pos = screen_height - character_height

    # 충돌 처리를 위한 rect정보 업데이트
    character_rect = character.get_rect()
    character_rect.left = character_x_pos
    character_rect.top = character_y_pos

    enemy_rect = enemy.get_rect()
    enemy_rect.left = enemy_x_pos
    enemy_rect.top = enemy_y_pos

    # 충돌 체크
    if character_rect.colliderect(enemy_rect) :
        print('충돌했어요')
        running = False

    screen.blit(background,(0,0)) # 배경 그리기
    screen.blit(character,(character_x_pos,character_y_pos))
    screen.blit(enemy,(enemy_x_pos,enemy_y_pos)) # 적 그리기기

    pygame.display.update() # 게임화면을 다시 그리기

# pygame 종료
pygame.quit()

import pygame

pygame.init() # 초기화 (반드시 필요)

# 화면 크기 설정
screen_width = 480 # 가로크기
screen_height = 640 # 세로크기
screen = pygame.display.set_mode((screen_width,screen_height))

# 화면 타이틀 설정
pygame.display.set_caption('Doosik Game') # 게임 이름 

# FPS
clock = pygame.time.Clock()

# 배경 이미지 불러오기
background = pygame.image.load('C:/pythonworkspace/background.png')

# 캐릭터(스프라이트) 불러오기
character = pygame.image.load('C:/pythonworkspace/박순경.png')
character_size = character.get_rect().size # 이미지 크기를 구해옴
character_width = character_size[0] # 캐릭터의 가로 크기
character_height = character_size[1] # 캐릭터의 세로 크기
character_x_pos = (screen_width/2) - (character_width/2) # 화면 가로의 절반 크기에 해당하는 곳에 위치 (가로)
character_y_pos = screen_height - character_height # 화면 세로 크기에 가장 아래쪽에 위치 (세로)

# 이동할 좌표
to_x = 0
to_y = 0

# 이동 속도
character_speed = 0.6

# 적 enemy 캐릭터
enemy = pygame.image.load('C:/pythonworkspace/enemy.png')
enemy_size = enemy.get_rect().size # 이미지 크기를 구해옴
enemy_width = enemy_size[0] # 캐릭터의 가로 크기
enemy_height = enemy_size[1] # 캐릭터의 세로 크기
enemy_x_pos = (screen_width/2) - (enemy_width/2) # 화면 가로의 절반 크기에 해당하는 곳에 위치 (가로)
enemy_y_pos = (screen_height/2) - (enemy_height/2) # 화면 세로 크기에 가장 아래쪽에 위치 (세로)

# 폰트 정의
game_font = pygame.font.Font(None,40) # 폰트 객체 생성(폰트,크기)

# 총 시간
total_time = 10

# 시작 시간
start_ticks = pygame.time.get_ticks() # 현재재 tick 정보를 받아옴

# 이벤트 루프
running = True # 게임이 진행중인가?
while running :
    dt = clock.tick(60) # 게임 화면의 초당 프레임 수를 설정

# 캐릭터가 1초 동안에 100 만큼 이동을 해야함
# 10 fps : 1초 동안에 10번 동작 -> 1번에 몇 만큼 이동? 10만큼! 10 * 10 = 100
# 20 fps : 1초 동안에 20번 동작 -> 1번에 5만큼! 5 * 20 = 100
    for event in pygame.event.get() : # 어떤 이벤트가 발생하였는가?
        if event.type == pygame.QUIT : # 창이 닫히는 이벤트가 발생하였는가?
            running = False # 게임이 진행중이 아님

        if event.type == pygame.KEYDOWN : # 키가 눌러졌는지 확인
            if event.key == pygame.K_LEFT : # 키 왼쪽
                to_x -= character_speed
            elif event.key == pygame.K_RIGHT : # 키 오른쪽
                to_x += character_speed
            elif event.key == pygame.K_UP : # 키 위쪽
                to_y -= character_speed
            elif event.key == pygame.K_DOWN : # 키 아래쪽
                to_y += character_speed

        if event.type == pygame.KEYUP : # 방향키를 떼면 멈춤
            if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT :
                to_x = 0
            elif event.key == pygame.K_UP or event.key == pygame.K_DOWN :
                to_y = 0

    character_x_pos += to_x * dt
    character_y_pos += to_y * dt

    # 가로 경계값 처리
    if character_x_pos < 0 :
        character_x_pos = 0
    elif character_x_pos > screen_width - character_width :
        character_x_pos = screen_width - character_width

    # 세로 경계값 처리
    if character_y_pos < 0 :
        character_y_pos = 0
    elif character_y_pos > screen_height - character_height :
        character_y_pos = screen_height - character_height

    # 충돌 처리를 위한 rect정보 업데이트
    character_rect = character.get_rect()
    character_rect.left = character_x_pos
    character_rect.top = character_y_pos

    enemy_rect = enemy.get_rect()
    enemy_rect.left = enemy_x_pos
    enemy_rect.top = enemy_y_pos

    # 충돌 체크
    if character_rect.colliderect(enemy_rect) :
        print('충돌했어요')
        running = False

    screen.blit(background,(0,0)) # 배경 그리기
    screen.blit(character,(character_x_pos,character_y_pos))
    screen.blit(enemy,(enemy_x_pos,enemy_y_pos)) # 적 그리기기

    # 타이머 집어 넣기
    # 경과 시간 계산
    elapsed_time = (pygame.time.get_ticks() - start_ticks) / 1000
    # 경과시간을(ms)을 1000으로 나누어서 초(s) 단위로 표시

    timer = game_font.render(str(int(total_time - elapsed_time)),True,(255,255,255))
    # 출력할 글자,True,글자 색상
    screen.blit(timer,(10,10))

    # 만약 시간이 0이 되면 종료
    if total_time - elapsed_time <= 0 :
        print('타임아웃!')
        running = False

    pygame.display.update() # 게임화면을 다시 그리기

# 잠시 대기
pygame.time.delay(1000) # 1초 정도 딜레이

# pygame 종료
pygame.quit()

import pygame
##################################################
# 기본 초기화 (반드시 해야 함)
pygame.init() # 초기화 (반드시 필요)

# 화면 크기 설정
screen_width = 480 # 가로크기
screen_height = 640 # 세로크기
screen = pygame.display.set_mode((screen_width,screen_height))

# 화면 타이틀 설정
pygame.display.set_caption('Doosik Game') # 게임 이름 

# FPS
clock = pygame.time.Clock()
##################################################

# 1. 사용자 게임 초기화 (배경화면,게임 이미지,좌표,속도,폰트 등등)


running = True 
while running :
    dt = clock.tick(30) 

    # 2. 이벤트 처리 (키보드,마우스 등등)
    for event in pygame.event.get() : 
        if event.type == pygame.QUIT : 
            running = False 
    # 3. 게임 캐릭터 위치 정의
    
    # 4. 충돌 처리

    # 5. 화면에 그리기

    pygame.display.update() # 게임화면을 다시 그리기



# pygame 종료
pygame.quit()

import random
import pygame
##################################################
# 기본 초기화 (반드시 해야 함)
pygame.init() # 초기화 (반드시 필요)

# 화면 크기 설정
screen_width = 480 # 가로크기
screen_height = 640 # 세로크기
screen = pygame.display.set_mode((screen_width,screen_height))

# 화면 타이틀 설정
pygame.display.set_caption('Doosik Game') # 게임 이름 

# 배경 이미지 설정
background = pygame.image.load('C:/pythonworkspace/똥 피하기 배경.png')

# 캐릭터 불러오기
character = pygame.image.load('C:/pythonworkspace/영웅 박준성씨.png')
character_siez = character.get_rect().size
character_width = character_siez[0] # 가로
character_height = character_siez[1] # 세로
character_x_pos = (screen_width/2) - (character_width/2)
character_y_pos = screen_height - character_height

# 빌런런 소환
enemy = pygame.image.load('C:/pythonworkspace/악당_이상훈씨.png')
enemy_siez = enemy.get_rect().size
enemy_width = enemy_siez[0] # 가로
enemy_height = enemy_siez[1] # 세로
enemy_x_pos = random.randint(0,screen_width-enemy_width)
enemy_y_pos = 0
enemy_speed = 10

# 이동할 좌표
to_x = 0
to_y = 0

# FPS
clock = pygame.time.Clock()
##################################################

# 1. 사용자 게임 초기화 (배경화면,게임 이미지,좌표,속도,폰트 등등)


running = True 
while running :
    dt = clock.tick(60) 
    
    character_speed = 5
    # 2. 이벤트 처리 (키보드,마우스 등등)
    for event in pygame.event.get() : 
        if event.type == pygame.QUIT : 
            running = False 

        if event.type == pygame.KEYDOWN :
            if event.key == pygame.K_LEFT :
                to_x -= character_speed
            if event.key == pygame.K_RIGHT :
                to_x += character_speed

        if event.type == pygame.KEYUP :
            if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT :
                to_x = 0

    character_x_pos += to_x
    character_y_pos += to_y

    enemy_y_pos += enemy_speed

    # 가로 경계값 처리
    if character_x_pos < 0 :
        character_x_pos = 0
    elif character_x_pos > screen_width - character_width :
        character_x_pos = screen_width - character_width

    if enemy_y_pos > screen_height :
        enemy_y_pos = 0
        enemy_x_pos = random.randint(0,screen_width-enemy_width)


    screen.blit(background,(0,0))
    screen.blit(character,(character_x_pos,character_y_pos))
    screen.blit(enemy,(enemy_x_pos,enemy_y_pos))
    # 3. 게임 캐릭터 위치 정의
    
    # 4. 충돌 처리
    character_rect = character.get_rect()
    character_rect.left = character_x_pos
    character_rect.top = character_y_pos

    enemy_rect = enemy.get_rect()
    enemy_rect.left = enemy_x_pos
    enemy_rect.top = enemy_y_pos

    if character_rect.colliderect(enemy_rect) :
        print('충돌했어요!')
        running = False

    # 5. 화면에 그리기

    pygame.display.update() # 게임화면을 다시 그리기



# pygame 종료
pygame.quit()
