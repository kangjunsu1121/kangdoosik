// 보스 만들기, 게임 오버 처리
using System.Collections; // EnemySpawner 스크립트
using System.Collections.Generic;
using UnityEngine;

public class EnemySpawner : MonoBehaviour
{
    [SerializeField]
    private GameObject[] enemies;

    [SerializeField]
    private GameObject Boss;
    private float[] arrPosX = {-2.2f, -1.1f, 0f, 1.1f, 2.2f};
    
    [SerializeField]
    private float spawnIntetval = 1.5f;
    // Start is called before the first frame update
    void Start()
    {
        StartEnemyRoutine();
    }

    void StartEnemyRoutine() { // 적을 생성하기 시작하는 메서드.
        StartCoroutine("EnemyRoutine");
    }

    public void StopEnemyRoutine() { // 주인공이 죽으면 게임을 종료 시키기 위한 메서드를 만드는 구문.
        StopCoroutine("EnemyRoutine");
    }
    IEnumerator EnemyRoutine() {
        yield return new WaitForSeconds(3f);

        float moveSpeed = 5f;
        int spawnCount = 0;
        int enemyIndex = 0; 
        
        while (true) { // 적을 계속 생성 해주기 위한 while문 구문.
            foreach (float posX in arrPosX) { 
                SpawnEnemy(posX, enemyIndex, moveSpeed);
            }

            spawnCount += 1;
            if (spawnCount % 10 == 0) { // 적이 10번정도 생성이 되면 다음 레벨에 적을 생성해 주는 구문.
                enemyIndex += 1;
                moveSpeed += 2;
            }

            if (enemyIndex >= enemies.Length) { // enemyIndex가 6을 넘겼을 때 보스를 생성해 주는 구문.
                SpawnBoss();
                enemyIndex = 0; // 보스를 생성 했는데 나머지 적들까지 제일 높은 레벨에 적이면 게임이 너무 어려워져서 다시 제일 낮은 레벨에 적을 생성하기 위한 구문.
                moveSpeed = 5f; // movespeed도 다시 낮춰준다.
            }
            yield return new WaitForSeconds(spawnIntetval);
        }
    }
    // Update is called once per frame
    void SpawnEnemy(float posX, int index, float moveSpeed) {
        Vector3 spawnPos = new Vector3(posX, transform.position.y, transform.position.y);
        
        if (Random.Range(0,5) == 0) { // 적 5명 중에 랜덤으로 몇명은 한단계 높은 레벨에 적을 생성 해주는 구문.
            index += 1;
        }

        if (index >= enemies.Length) { // 적이 총 7명이기 때문에 index값이 6을 넘어가지 않게 막아주는 구문.
            index = enemies.Length -1; 
        }
        
        GameObject enemyOnject = Instantiate(enemies[index], spawnPos, Quaternion.identity);
        Enemy enemy = enemyOnject.GetComponent<Enemy>(); //  대충 Enemy 스크립트에 있는 내용들을 쓸 수 있다고 한다.
        enemy.setMoveSpeed(moveSpeed); // Enemy 스크립트에서 Public으로 만든 setMoveSpeed를 가져와서 EnemySpawner 스크립트 안에서 정의한 moveSpeed를 사용해서 적 레벨이 올라갈수록 스피드가 빨라지게 만들었다.
    }

    void SpawnBoss() {
        Instantiate(Boss, transform.position, Quaternion.identity); // Instantiate를 통해 보스를 생성해 준다.
    }
}

using System.Collections; // GameManager 스크립트
using System.Collections.Generic;
using UnityEngine;
using TMPro; // 이걸 사용하겠다고 using으로 정의해줘야 밑에 TextMeshProUGUI가 사용 가능하다.

public class GameManager : MonoBehaviour
{
    public static GameManager instance = null;

    [SerializeField]
    private TextMeshProUGUI text;
    private int coin = 0; // 게임 화면에 코인을 먹으면 개수가 늘어나는 걸 보여줘야 해서 코인 변수를 만들어준다.
    
    [HideInInspector] // 이거 사용하면 Inspector에서 밑에 만든 변수를 숨겨줘서 Inspector에서는 확인할 수 없다.
    public bool isGameOver = false; // 보스를 잡았을 때 무기를 계속 쏘지 않기 위해 공격 하는 걸 멈추는 변수.
    void Awake() {
        if (instance == null) { // 싱글턴이라는 디자인 패턴이라고 한다.
            instance = this;
        }
    }

    public void IncreaseCoin() { // 이 함수를 public으로 만들어 줌으로써 player 스크립트에서 코인을 먹었을 때 충돌 처리로 이 함수를 사용한다.
        coin += 1;
        text.SetText(coin.ToString()); // 게임 화면에 텍스트를 업데이트 해주기 위해 사용하는 함수(int인 coin을 문자열로 바꿔주기 위해 ToString을 사용해 주었다.)
    
        if (coin % 10 == 0) { // 코인을 30개 먹을 때 마다 무기를 업그레이드 시켜주기 위한 부분.
            player player = FindObjectOfType<player>(); // Unity의 FindObjectOfType 메서드는 특정 타입의 게임 오브젝트를 찾는 데 사용되는 메서드이다. 이 메서드는 지정된 타입의 게임 오브젝트가 하나라도 있는 경우 그 게임 오브젝트를 반환하고, 없는 경우 null을 반환한다.
                if (player != null) { // 찾았을 때 null 아니고 잘 찾았다면 실행된다.
                player.Upgrade();
            }
        }
    }

    public void SetGameOver() { // EnemySpawner에서 만든 StopEnemyRoutine를 가져와서 게임을 종료시키는 메서드를 만든다.
        isGameOver = true; // isGameOver값을 true로 바꿔줌으로써 player에서 공격을 멈추는데 사용한다.
        
        EnemySpawner enemySpawner = FindObjectOfType<EnemySpawner>();
        if (enemySpawner != null) {
            enemySpawner.StopEnemyRoutine();
        }
    }
}

using System.Collections; // Enemy 스크립트트
using System.Collections.Generic;
using UnityEngine;

public class Enemy : MonoBehaviour
{   
    [SerializeField]
    private GameObject coin; // 유니티에서 코인 prefabs을 드래그해서 놔두기 위해 만들어준다.

    [SerializeField]
    private float moveSpeed = 10f;
    private float minY = -7f; 
    [SerializeField]
    private float hp = 1f; // 체력 변수 설정
    // Start is called before the first frame update
    public void setMoveSpeed(float moveSpeed) {
        this.moveSpeed = moveSpeed; 
    }

    // Update is called once per frame
    void Update()
    {
        transform.position += Vector3.down * moveSpeed * Time.deltaTime;
        if (transform.position.y < minY) {
            Destroy(gameObject); // 적이 게임 화면을 벗어나면 없어지게 처리하는 부분.
        }
    }
    // is trigger가 체크 되어있으면 여기서 충돌 처리 
    private void OnTriggerEnter2D(Collider2D other) {
        if (other.gameObject.tag == "Weapon") { // 태그가 weapon으로 되어있는 오브젝트를 만났을 때 실행 될 수 있게 처리하는 부분.
            Weapon weapon = other.gameObject.GetComponent<Weapon>(); // Weapon스크립트 내용 가져오기 
            hp -= weapon.damage;
            if (hp <= 0) {
                if (gameObject.tag == "Boss") { // 여기서 gameObject는 Enemy를 뜻한다. 이 구문은 tag 값이 Boss에 해당할 때만 실행된다.
                    GameManager.instance.SetGameOver(); // 보스를 잡으면 게임이 종료되는 구문이다.
                }
                Destroy(gameObject); // 적 hp가 0이 되거나 그거보다 적을 때 그 적 오브젝트는 사라지게 처리하는 부분.
                Instantiate(coin, transform.position, Quaternion.identity); // Instantiate 함수는 게임 오브젝트를 동적으로 생성해준다.(생성할 객체 (주로 프리팹), 생성될 위치, 생성 시 회전상태)
            }
            Destroy(other.gameObject); // 무기는 적에게 닿으면 항상 사라져야 하니까 항상 사라지게 처리하는 부분.
        }
    }
    // 체크가 안 되어있으면 여기서 충돌 처리 
    // private void OnCollisionEnter2D(Collision2D other) {}
}

using System.Collections; // player 스크립트
using System.Collections.Generic;
using UnityEngine;

public class player : MonoBehaviour
{
    [SerializeField]
    private float moveSpeed;

    [SerializeField]
    private GameObject[] Weapons; // []를 붙임으로써 여러개의 무기 배열을 받을 수 있다.
    private int WeaponIndex = 0; // Weapons에 저장 된 무기를 가져올 수 있게 Weapons 전용 Index를 만들어 준다.

    [SerializeField]
    private Transform shootTransform;

    [SerializeField]
    private float shootInterval = 0.05f;
    private float lastShootTime = 0f;
    // Update is called once per frame
    void Update()
    {
        // float horizontalInput = Input.GetAxisRaw("Horizontal");
        // //float verticalInput = Input.GetAxisRaw("Vertical");
        // Vector3 moveTo = new Vector3(horizontalInput, 0f, 0f);
        // transform.position += moveTo * moveSpeed * Time.deltaTime;
        Vector3 mousePos = Camera.main.ScreenToWorldPoint(Input.mousePosition);
        float tox = Mathf.Clamp(mousePos.x, -2.35f, 2.35f); // 현재값,최소값,최대값 
        transform.position = new Vector3(tox, transform.position.y, transform.position.z);
        
        if(GameManager.instance.isGameOver == false) { // GameManager에서 값을 true로 바꿔줘서 공격을 멈추게 된다.
            Shoot();
        }
        
    }   

    void Shoot() {
        if (Time.time - lastShootTime > shootInterval) {
            Instantiate(Weapons[WeaponIndex], shootTransform.position, Quaternion.identity);
            lastShootTime = Time.time;
        }

        
    }
    private void OnTriggerEnter2D(Collider2D other) { // 무기와 주인공이 충돌 했을 때 실행 되는 부분.
        if (other.gameObject.tag == "Enemy" || other.gameObject.tag == "Boss") { // C#에서는 or이 ||로 사용된다.
            // Debug.Log("Game Over"); // 무기와 주인공이 충돌하면 바로 주인공은 사라지고 Game Over 알림이 뜨게 처리하는 부분.
            GameManager.instance.SetGameOver(); // 밑에 구문과 똑같이 GameManager에 있는 SetGameOver(게임을 종료 시키는)메서드를 instance으로 가져와서 사용한다.
            Destroy(gameObject);
        } else if (other.gameObject.tag == "Coin") { // 코인과 주인공이 충돌 했을 때 실행 되는 부분.
            GameManager.instance.IncreaseCoin();
            Destroy(other.gameObject); // 코인을 주인공이 먹으면 바로 사라져야해서 코인을 바로 없애주는 부분.
        }
    }

    public void Upgrade() { // GameManager에서 사용 가능하게 Public으로 만들어준다.
        WeaponIndex += 1; // 무기 업그레이드를 위해 Index를 1 증가 시킨다.
        if (WeaponIndex >= Weapons.Length) { // 현재 무기가 3개 밖에 없기 때문에 Index가 2까지 밖에 없는데 Index가 2를 넘어가는 걸 방지해 주는 부분.
            WeaponIndex = Weapons.Length -1;
        }
    }
}





